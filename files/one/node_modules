sever.js
    import "./config"; same level
    import "../config"; up one level
    import "config" package


make a config.js and server.js

server.js
    import "./config";


config.js
    console.log("config.js file log thing")

$ babel-node server.js NYOPE
$ ./node_modules/.bin/babel-node server.js
    //sucks
    // ~/.bash_profile or something
    export PATH=$PATH:./node_modules/.bin

//import calls cached

every module has own scope
    even when imported!


config.js
    const env = process.env;

    export default {
        port: env.PORT || 8080//env port default to 8080
    }

server.js
    import config from './config';
    console.log(config)

$ babel-node server.js


//////////////////

config.js
    export const nodeEnv = env.NODE_ENV || 'development'

    export const logStars = function(message){
        console.info("*******************");
        console.info(message)
        console.info("*******************");
    };

    export const logStar

settings.js
    import config, { nodeEnv, logStars } from './config'; //{} for non default export

    logStars('function')
